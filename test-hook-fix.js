// Teste para validar se a corre√ß√£o do hook funcionou
const fs = require('fs');
const path = require('path');

console.log('üß™ TESTANDO CORRE√á√ÉO DO HOOK useBoletoEscrow');
console.log('============================================');

try {
  // Verificar se o arquivo existe
  const hookPath = './frontend/src/hooks/useBoletoEscrow.js';
  
  if (!fs.existsSync(hookPath)) {
    console.log('‚ùå Arquivo useBoletoEscrow.js n√£o encontrado!');
    process.exit(1);
  }

  console.log('‚úÖ Arquivo encontrado!');
  
  // Ler o conte√∫do do arquivo
  const content = fs.readFileSync(hookPath, 'utf8');
  
  // Verificar se os hooks est√£o no n√≠vel superior
  const hooksAtTopLevel = content.includes('// Hooks para contratos (n√≠vel superior)');
  
  if (hooksAtTopLevel) {
    console.log('‚úÖ Hooks movidos para o n√≠vel superior!');
  } else {
    console.log('‚ùå Hooks ainda n√£o est√£o no n√≠vel superior!');
  }
  
  // Verificar se useContractWrite est√° sendo usado corretamente (nova estrutura)
  const useContractWriteAtTop = content.includes('const approveUSDTWrite = useContractWrite({');
  const useContractWriteInFunction = content.includes('useContractWrite({') && 
                                    content.includes('// Primeiro, aprovar o gasto de USDT');
  
  if (useContractWriteAtTop && !useContractWriteInFunction) {
    console.log('‚úÖ useContractWrite movido para o n√≠vel superior!');
  } else {
    console.log('‚ùå useContractWrite ainda est√° sendo usado dentro das fun√ß√µes!');
  }
  
  // Verificar se as fun√ß√µes est√£o usando os hooks corretamente (nova estrutura)
  const approveUSDTUsage = content.includes('await approveUSDTWrite.writeAsync({');
  const createEscrowUsage = content.includes('await createEscrowWrite.writeAsync({');
  
  if (approveUSDTUsage && createEscrowUsage) {
    console.log('‚úÖ Fun√ß√µes usando hooks corretamente!');
  } else {
    console.log('‚ùå Fun√ß√µes n√£o est√£o usando hooks corretamente!');
  }
  
  // Verificar se n√£o h√° hooks aninhados (apenas useContractWrite)
  const useContractWriteCount = (content.match(/useContractWrite/g) || []).length;
  const useContractReadCount = (content.match(/useContractRead/g) || []).length;
  
  if (useContractWriteCount <= 4) { // 4 hooks no n√≠vel superior
    console.log('‚úÖ N√∫mero correto de useContractWrite (4 no n√≠vel superior)!');
  } else {
    console.log(`‚ùå Muitos useContractWrite detectados (${useContractWriteCount}) - pode haver hooks aninhados!`);
  }
  
  console.log(`   useContractWrite: ${useContractWriteCount}`);
  console.log(`   useContractRead: ${useContractReadCount}`);
  
  // Verificar se h√° verifica√ß√µes de seguran√ßa
  const hasSafetyChecks = content.includes('!approveUSDTWrite.writeAsync') && 
                         content.includes('Hooks de contrato n√£o est√£o prontos');
  
  if (hasSafetyChecks) {
    console.log('‚úÖ Verifica√ß√µes de seguran√ßa implementadas!');
  } else {
    console.log('‚ùå Verifica√ß√µes de seguran√ßa n√£o implementadas!');
  }
  
  console.log('\nüéØ AN√ÅLISE COMPLETA:');
  console.log('====================');
  console.log(`1. Arquivo existe: ${fs.existsSync(hookPath) ? '‚úÖ' : '‚ùå'}`);
  console.log(`2. Hooks no n√≠vel superior: ${hooksAtTopLevel ? '‚úÖ' : '‚ùå'}`);
  console.log(`3. useContractWrite movido: ${useContractWriteAtTop && !useContractWriteInFunction ? '‚úÖ' : '‚ùå'}`);
  console.log(`4. Fun√ß√µes usando hooks: ${approveUSDTUsage && createEscrowUsage ? '‚úÖ' : '‚ùå'}`);
  console.log(`5. N√∫mero de useContractWrite: ${useContractWriteCount <= 4 ? '‚úÖ' : '‚ùå'} (${useContractWriteCount})`);
  console.log(`6. Verifica√ß√µes de seguran√ßa: ${hasSafetyChecks ? '‚úÖ' : '‚ùå'}`);
  
  if (hooksAtTopLevel && useContractWriteAtTop && !useContractWriteInFunction && 
      approveUSDTUsage && createEscrowUsage && useContractWriteCount <= 4 && hasSafetyChecks) {
    console.log('\nüéâ HOOK CORRIGIDO COM SUCESSO!');
    console.log('O erro "Invalid hook call" deve estar resolvido.');
    console.log('O erro "approveUSDT is not a function" deve estar resolvido.');
  } else {
    console.log('\n‚ö†Ô∏è  AINDA H√Å PROBLEMAS NO HOOK!');
    console.log('Verifique as corre√ß√µes acima.');
  }
  
} catch (error) {
  console.error('‚ùå Erro ao analisar o hook:', error.message);
}
