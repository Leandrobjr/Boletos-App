/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace P2PEscrowEnhanced {
  export type EnhancedEscrowStruct = {
    seller: AddressLike;
    buyer: AddressLike;
    boletoValue: BigNumberish;
    sellerFee: BigNumberish;
    buyerFee: BigNumberish;
    createdAt: BigNumberish;
    uploadDeadline: BigNumberish;
    autoReleaseTime: BigNumberish;
    isActive: boolean;
    isReleased: boolean;
    isDisputed: boolean;
    uploadeado: boolean;
    status: BigNumberish;
  };

  export type EnhancedEscrowStructOutput = [
    seller: string,
    buyer: string,
    boletoValue: bigint,
    sellerFee: bigint,
    buyerFee: bigint,
    createdAt: bigint,
    uploadDeadline: bigint,
    autoReleaseTime: bigint,
    isActive: boolean,
    isReleased: boolean,
    isDisputed: boolean,
    uploadeado: boolean,
    status: bigint
  ] & {
    seller: string;
    buyer: string;
    boletoValue: bigint;
    sellerFee: bigint;
    buyerFee: bigint;
    createdAt: bigint;
    uploadDeadline: bigint;
    autoReleaseTime: bigint;
    isActive: boolean;
    isReleased: boolean;
    isDisputed: boolean;
    uploadeado: boolean;
    status: bigint;
  };
}

export interface P2PEscrowEnhancedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTO_RELEASE_PERIOD"
      | "BUYER_FEE_PERCENTAGE"
      | "BUYER_FEE_THRESHOLD"
      | "FEE_DENOMINATOR"
      | "FIXED_BUYER_FEE"
      | "FULL_REFUND_PERIOD"
      | "HALF_REFUND_PERIOD"
      | "QUARTER_REFUND_PERIOD"
      | "SELLER_FEE_PERCENTAGE"
      | "UPLOAD_DEADLINE"
      | "approvePayment"
      | "authorizedDisputeResolvers"
      | "autoReleaseEscrow"
      | "calculateBuyerFee"
      | "calculateSellerRefund"
      | "canAutoRelease"
      | "cancelEscrow"
      | "createDispute"
      | "createEnhancedEscrow"
      | "emergencyWithdraw"
      | "escrows"
      | "expireEscrow"
      | "getEscrowDetails"
      | "markPaymentProofUploaded"
      | "owner"
      | "pause"
      | "paused"
      | "registerBuyer"
      | "renounceOwnership"
      | "resolveDispute"
      | "setDisputeResolver"
      | "transferOwnership"
      | "unpause"
      | "usdt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyerRegistered"
      | "DisputeCreated"
      | "DisputeResolved"
      | "EscrowCancelled"
      | "EscrowCreated"
      | "EscrowExpired"
      | "EscrowReleased"
      | "OwnershipTransferred"
      | "Paused"
      | "PaymentProofUploaded"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUTO_RELEASE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BUYER_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BUYER_FEE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIXED_BUYER_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FULL_REFUND_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HALF_REFUND_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUARTER_REFUND_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SELLER_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPLOAD_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvePayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedDisputeResolvers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "autoReleaseEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSellerRefund",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAutoRelease",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDispute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createEnhancedEscrow",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "expireEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markPaymentProofUploaded",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerBuyer",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeResolver",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AUTO_RELEASE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BUYER_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BUYER_FEE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIXED_BUYER_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FULL_REFUND_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HALF_REFUND_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUARTER_REFUND_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SELLER_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPLOAD_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedDisputeResolvers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoReleaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSellerRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAutoRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEnhancedEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expireEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markPaymentProofUploaded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
}

export namespace BuyerRegisteredEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    buyer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    buyer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    buyer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeCreatedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    initiator: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    initiator: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    initiator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    resolver: AddressLike,
    winner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    resolver: string,
    winner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    resolver: string;
    winner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCancelledEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    seller: AddressLike,
    refundAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    seller: string,
    refundAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    seller: string;
    refundAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    seller: AddressLike,
    boletoId: BigNumberish,
    boletoValue: BigNumberish,
    sellerFee: BigNumberish,
    buyerFee: BigNumberish,
    createdAt: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    seller: string,
    boletoId: bigint,
    boletoValue: bigint,
    sellerFee: bigint,
    buyerFee: bigint,
    createdAt: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    seller: string;
    boletoId: bigint;
    boletoValue: bigint;
    sellerFee: bigint;
    buyerFee: bigint;
    createdAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowExpiredEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    seller: AddressLike,
    refundAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    seller: string,
    refundAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    seller: string;
    refundAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowReleasedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    seller: AddressLike,
    buyer: AddressLike,
    boletoValue: BigNumberish,
    sellerFeeRefunded: BigNumberish,
    buyerFee: BigNumberish,
    protocolEarnings: BigNumberish,
    autoReleased: boolean
  ];
  export type OutputTuple = [
    escrowId: string,
    seller: string,
    buyer: string,
    boletoValue: bigint,
    sellerFeeRefunded: bigint,
    buyerFee: bigint,
    protocolEarnings: bigint,
    autoReleased: boolean
  ];
  export interface OutputObject {
    escrowId: string;
    seller: string;
    buyer: string;
    boletoValue: bigint;
    sellerFeeRefunded: bigint;
    buyerFee: bigint;
    protocolEarnings: bigint;
    autoReleased: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentProofUploadedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    buyer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    buyer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    buyer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface P2PEscrowEnhanced extends BaseContract {
  connect(runner?: ContractRunner | null): P2PEscrowEnhanced;
  waitForDeployment(): Promise<this>;

  interface: P2PEscrowEnhancedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTO_RELEASE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  BUYER_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  BUYER_FEE_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  FIXED_BUYER_FEE: TypedContractMethod<[], [bigint], "view">;

  FULL_REFUND_PERIOD: TypedContractMethod<[], [bigint], "view">;

  HALF_REFUND_PERIOD: TypedContractMethod<[], [bigint], "view">;

  QUARTER_REFUND_PERIOD: TypedContractMethod<[], [bigint], "view">;

  SELLER_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  UPLOAD_DEADLINE: TypedContractMethod<[], [bigint], "view">;

  approvePayment: TypedContractMethod<
    [_escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  authorizedDisputeResolvers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  autoReleaseEscrow: TypedContractMethod<
    [_escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  calculateBuyerFee: TypedContractMethod<
    [boletoValue: BigNumberish],
    [bigint],
    "view"
  >;

  calculateSellerRefund: TypedContractMethod<
    [
      createdAt: BigNumberish,
      currentTime: BigNumberish,
      originalFee: BigNumberish
    ],
    [bigint],
    "view"
  >;

  canAutoRelease: TypedContractMethod<
    [_escrowId: BytesLike],
    [boolean],
    "view"
  >;

  cancelEscrow: TypedContractMethod<
    [_escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  createDispute: TypedContractMethod<
    [_escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  createEnhancedEscrow: TypedContractMethod<
    [_boletoId: BigNumberish, _boletoValue: BigNumberish, _buyer: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  escrows: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint
      ] & {
        seller: string;
        buyer: string;
        boletoValue: bigint;
        sellerFee: bigint;
        buyerFee: bigint;
        createdAt: bigint;
        uploadDeadline: bigint;
        autoReleaseTime: bigint;
        isActive: boolean;
        isReleased: boolean;
        isDisputed: boolean;
        uploadeado: boolean;
        status: bigint;
      }
    ],
    "view"
  >;

  expireEscrow: TypedContractMethod<
    [_escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  getEscrowDetails: TypedContractMethod<
    [_escrowId: BytesLike],
    [P2PEscrowEnhanced.EnhancedEscrowStructOutput],
    "view"
  >;

  markPaymentProofUploaded: TypedContractMethod<
    [_escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerBuyer: TypedContractMethod<
    [_escrowId: BytesLike, _buyer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [_escrowId: BytesLike, _winner: AddressLike],
    [void],
    "nonpayable"
  >;

  setDisputeResolver: TypedContractMethod<
    [_resolver: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usdt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTO_RELEASE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BUYER_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BUYER_FEE_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIXED_BUYER_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FULL_REFUND_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HALF_REFUND_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUARTER_REFUND_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SELLER_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPLOAD_DEADLINE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approvePayment"
  ): TypedContractMethod<[_escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedDisputeResolvers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "autoReleaseEscrow"
  ): TypedContractMethod<[_escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateBuyerFee"
  ): TypedContractMethod<[boletoValue: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateSellerRefund"
  ): TypedContractMethod<
    [
      createdAt: BigNumberish,
      currentTime: BigNumberish,
      originalFee: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "canAutoRelease"
  ): TypedContractMethod<[_escrowId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelEscrow"
  ): TypedContractMethod<[_escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createDispute"
  ): TypedContractMethod<[_escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEnhancedEscrow"
  ): TypedContractMethod<
    [_boletoId: BigNumberish, _boletoValue: BigNumberish, _buyer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint
      ] & {
        seller: string;
        buyer: string;
        boletoValue: bigint;
        sellerFee: bigint;
        buyerFee: bigint;
        createdAt: bigint;
        uploadDeadline: bigint;
        autoReleaseTime: bigint;
        isActive: boolean;
        isReleased: boolean;
        isDisputed: boolean;
        uploadeado: boolean;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "expireEscrow"
  ): TypedContractMethod<[_escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEscrowDetails"
  ): TypedContractMethod<
    [_escrowId: BytesLike],
    [P2PEscrowEnhanced.EnhancedEscrowStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "markPaymentProofUploaded"
  ): TypedContractMethod<[_escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerBuyer"
  ): TypedContractMethod<
    [_escrowId: BytesLike, _buyer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [_escrowId: BytesLike, _winner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDisputeResolver"
  ): TypedContractMethod<
    [_resolver: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdt"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BuyerRegistered"
  ): TypedContractEvent<
    BuyerRegisteredEvent.InputTuple,
    BuyerRegisteredEvent.OutputTuple,
    BuyerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DisputeCreated"
  ): TypedContractEvent<
    DisputeCreatedEvent.InputTuple,
    DisputeCreatedEvent.OutputTuple,
    DisputeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCancelled"
  ): TypedContractEvent<
    EscrowCancelledEvent.InputTuple,
    EscrowCancelledEvent.OutputTuple,
    EscrowCancelledEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowExpired"
  ): TypedContractEvent<
    EscrowExpiredEvent.InputTuple,
    EscrowExpiredEvent.OutputTuple,
    EscrowExpiredEvent.OutputObject
  >;
  getEvent(
    key: "EscrowReleased"
  ): TypedContractEvent<
    EscrowReleasedEvent.InputTuple,
    EscrowReleasedEvent.OutputTuple,
    EscrowReleasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentProofUploaded"
  ): TypedContractEvent<
    PaymentProofUploadedEvent.InputTuple,
    PaymentProofUploadedEvent.OutputTuple,
    PaymentProofUploadedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BuyerRegistered(bytes32,address,uint256)": TypedContractEvent<
      BuyerRegisteredEvent.InputTuple,
      BuyerRegisteredEvent.OutputTuple,
      BuyerRegisteredEvent.OutputObject
    >;
    BuyerRegistered: TypedContractEvent<
      BuyerRegisteredEvent.InputTuple,
      BuyerRegisteredEvent.OutputTuple,
      BuyerRegisteredEvent.OutputObject
    >;

    "DisputeCreated(bytes32,address,uint256)": TypedContractEvent<
      DisputeCreatedEvent.InputTuple,
      DisputeCreatedEvent.OutputTuple,
      DisputeCreatedEvent.OutputObject
    >;
    DisputeCreated: TypedContractEvent<
      DisputeCreatedEvent.InputTuple,
      DisputeCreatedEvent.OutputTuple,
      DisputeCreatedEvent.OutputObject
    >;

    "DisputeResolved(bytes32,address,address,uint256)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "EscrowCancelled(bytes32,address,uint256,uint256)": TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;
    EscrowCancelled: TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;

    "EscrowCreated(bytes32,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowExpired(bytes32,address,uint256,uint256)": TypedContractEvent<
      EscrowExpiredEvent.InputTuple,
      EscrowExpiredEvent.OutputTuple,
      EscrowExpiredEvent.OutputObject
    >;
    EscrowExpired: TypedContractEvent<
      EscrowExpiredEvent.InputTuple,
      EscrowExpiredEvent.OutputTuple,
      EscrowExpiredEvent.OutputObject
    >;

    "EscrowReleased(bytes32,address,address,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;
    EscrowReleased: TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PaymentProofUploaded(bytes32,address,uint256)": TypedContractEvent<
      PaymentProofUploadedEvent.InputTuple,
      PaymentProofUploadedEvent.OutputTuple,
      PaymentProofUploadedEvent.OutputObject
    >;
    PaymentProofUploaded: TypedContractEvent<
      PaymentProofUploadedEvent.InputTuple,
      PaymentProofUploadedEvent.OutputTuple,
      PaymentProofUploadedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
