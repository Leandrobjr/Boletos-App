/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface P2PEscrowV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "FEE_PERCENTAGE"
      | "cancelEscrow"
      | "createEscrow"
      | "emergencyWithdraw"
      | "escrows"
      | "owner"
      | "pause"
      | "paused"
      | "releaseEscrow"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "usdt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EscrowCancelled"
      | "EscrowCreated"
      | "EscrowReleased"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
}

export namespace EscrowCancelledEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    seller: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    seller: string,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    seller: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    seller: AddressLike,
    boletoId: BigNumberish,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    seller: string,
    boletoId: bigint,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    seller: string;
    boletoId: bigint;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowReleasedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    seller: AddressLike,
    buyer: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    seller: string,
    buyer: string,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    seller: string;
    buyer: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface P2PEscrowV2 extends BaseContract {
  connect(runner?: ContractRunner | null): P2PEscrowV2;
  waitForDeployment(): Promise<this>;

  interface: P2PEscrowV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  cancelEscrow: TypedContractMethod<
    [_escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  createEscrow: TypedContractMethod<
    [_boletoId: BigNumberish, _amount: BigNumberish, _buyer: AddressLike],
    [string],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  escrows: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean] & {
        seller: string;
        buyer: string;
        amount: bigint;
        fee: bigint;
        boletoId: bigint;
        isActive: boolean;
        isReleased: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  releaseEscrow: TypedContractMethod<
    [_escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usdt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelEscrow"
  ): TypedContractMethod<[_escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEscrow"
  ): TypedContractMethod<
    [_boletoId: BigNumberish, _amount: BigNumberish, _buyer: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean] & {
        seller: string;
        buyer: string;
        amount: bigint;
        fee: bigint;
        boletoId: bigint;
        isActive: boolean;
        isReleased: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "releaseEscrow"
  ): TypedContractMethod<[_escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdt"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EscrowCancelled"
  ): TypedContractEvent<
    EscrowCancelledEvent.InputTuple,
    EscrowCancelledEvent.OutputTuple,
    EscrowCancelledEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowReleased"
  ): TypedContractEvent<
    EscrowReleasedEvent.InputTuple,
    EscrowReleasedEvent.OutputTuple,
    EscrowReleasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EscrowCancelled(bytes32,address,uint256,uint256)": TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;
    EscrowCancelled: TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;

    "EscrowCreated(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowReleased(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;
    EscrowReleased: TypedContractEvent<
      EscrowReleasedEvent.InputTuple,
      EscrowReleasedEvent.OutputTuple,
      EscrowReleasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
