/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BoletoEscrow {
  export type TransactionStruct = {
    id: BytesLike;
    seller: AddressLike;
    buyer: AddressLike;
    usdtAmount: BigNumberish;
    transactionFee: BigNumberish;
    buyerFee: BigNumberish;
    boletoId: BigNumberish;
    createdAt: BigNumberish;
    selectedAt: BigNumberish;
    proofUploadedAt: BigNumberish;
    completedAt: BigNumberish;
    boleto__VencimentoTimestamp: BigNumberish;
    status: BigNumberish;
    fundsReleased: boolean;
    isEmergencyWithdraw: boolean;
  };

  export type TransactionStructOutput = [
    id: string,
    seller: string,
    buyer: string,
    usdtAmount: bigint,
    transactionFee: bigint,
    buyerFee: bigint,
    boletoId: bigint,
    createdAt: bigint,
    selectedAt: bigint,
    proofUploadedAt: bigint,
    completedAt: bigint,
    boleto__VencimentoTimestamp: bigint,
    status: bigint,
    fundsReleased: boolean,
    isEmergencyWithdraw: boolean
  ] & {
    id: string;
    seller: string;
    buyer: string;
    usdtAmount: bigint;
    transactionFee: bigint;
    buyerFee: bigint;
    boletoId: bigint;
    createdAt: bigint;
    selectedAt: bigint;
    proofUploadedAt: bigint;
    completedAt: bigint;
    boleto__VencimentoTimestamp: bigint;
    status: bigint;
    fundsReleased: boolean;
    isEmergencyWithdraw: boolean;
  };
}

export interface BoletoEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTO_RELEASE_DEADLINE"
      | "COOLDOWN_PERIOD"
      | "FEE_DENOMINATOR"
      | "FIXED_FEE_LIMIT_USDT"
      | "FIXED_FEE_USDT"
      | "HALF_FEE_WINDOW"
      | "INSTANT_RELEASE_WINDOW"
      | "MAX_TRANSACTION_AMOUNT"
      | "PROOF_UPLOAD_DEADLINE"
      | "QUARTER_FEE_WINDOW"
      | "TRANSACTION_FEE_PERCENTAGE"
      | "VARIABLE_FEE_PERCENTAGE"
      | "autoRelease"
      | "boletoToTransaction"
      | "calculateBuyerFee"
      | "canAutoRelease"
      | "canUploadProof"
      | "cancelTransaction"
      | "createDispute"
      | "createTransaction"
      | "emergencyWithdraw"
      | "emergencyWithdrawDelay"
      | "feeRecipient"
      | "forceExpireTransactions"
      | "getStats"
      | "getTransaction"
      | "getTransactionByBoleto"
      | "lastActionTimestamp"
      | "manualRelease"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "resolveDispute"
      | "selectTransaction"
      | "setFeeRecipient"
      | "totalFeesCollected"
      | "totalTransactions"
      | "totalVolumeUSDT"
      | "transactions"
      | "transferOwnership"
      | "unpause"
      | "uploadProof"
      | "usdt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeCreated"
      | "EmergencyWithdraw"
      | "FeeRecipientUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "ProofUploaded"
      | "TransactionCancelled"
      | "TransactionCompleted"
      | "TransactionCreated"
      | "TransactionSelected"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUTO_RELEASE_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COOLDOWN_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIXED_FEE_LIMIT_USDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIXED_FEE_USDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HALF_FEE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSTANT_RELEASE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TRANSACTION_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROOF_UPLOAD_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUARTER_FEE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSACTION_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VARIABLE_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoRelease",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "boletoToTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAutoRelease",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canUploadProof",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDispute",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransaction",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceExpireTransactions",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "getStats", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionByBoleto",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastActionTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manualRelease",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BytesLike, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "selectTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolumeUSDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uploadProof",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AUTO_RELEASE_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COOLDOWN_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIXED_FEE_LIMIT_USDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIXED_FEE_USDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HALF_FEE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSTANT_RELEASE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TRANSACTION_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROOF_UPLOAD_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUARTER_FEE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSACTION_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VARIABLE_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boletoToTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAutoRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUploadProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceExpireTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionByBoleto",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastActionTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolumeUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uploadProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
}

export namespace DisputeCreatedEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    initiator: AddressLike,
    reason: string,
    createdAt: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: string,
    initiator: string,
    reason: string,
    createdAt: bigint
  ];
  export interface OutputObject {
    transactionId: string;
    initiator: string;
    reason: string;
    createdAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [
    admin: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    admin: string,
    token: string,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    admin: string;
    token: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [
    oldRecipient: AddressLike,
    newRecipient: AddressLike,
    updatedBy: AddressLike
  ];
  export type OutputTuple = [
    oldRecipient: string,
    newRecipient: string,
    updatedBy: string
  ];
  export interface OutputObject {
    oldRecipient: string;
    newRecipient: string;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofUploadedEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    buyer: AddressLike,
    uploadedAt: BigNumberish,
    autoReleaseAt: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: string,
    buyer: string,
    uploadedAt: bigint,
    autoReleaseAt: bigint
  ];
  export interface OutputObject {
    transactionId: string;
    buyer: string;
    uploadedAt: bigint;
    autoReleaseAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionCancelledEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    seller: AddressLike,
    refundAmount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    transactionId: string,
    seller: string,
    refundAmount: bigint,
    reason: string
  ];
  export interface OutputObject {
    transactionId: string;
    seller: string;
    refundAmount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionCompletedEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    seller: AddressLike,
    buyer: AddressLike,
    amountToBuyer: BigNumberish,
    feeToAdmin: BigNumberish,
    refundToSeller: BigNumberish,
    completedAt: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: string,
    seller: string,
    buyer: string,
    amountToBuyer: bigint,
    feeToAdmin: bigint,
    refundToSeller: bigint,
    completedAt: bigint
  ];
  export interface OutputObject {
    transactionId: string;
    seller: string;
    buyer: string;
    amountToBuyer: bigint;
    feeToAdmin: bigint;
    refundToSeller: bigint;
    completedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionCreatedEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    seller: AddressLike,
    boletoId: BigNumberish,
    usdtAmount: BigNumberish,
    transactionFee: BigNumberish,
    buyerFee: BigNumberish,
    vencimentoTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: string,
    seller: string,
    boletoId: bigint,
    usdtAmount: bigint,
    transactionFee: bigint,
    buyerFee: bigint,
    vencimentoTimestamp: bigint
  ];
  export interface OutputObject {
    transactionId: string;
    seller: string;
    boletoId: bigint;
    usdtAmount: bigint;
    transactionFee: bigint;
    buyerFee: bigint;
    vencimentoTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionSelectedEvent {
  export type InputTuple = [
    transactionId: BytesLike,
    buyer: AddressLike,
    selectedAt: BigNumberish,
    proofDeadline: BigNumberish
  ];
  export type OutputTuple = [
    transactionId: string,
    buyer: string,
    selectedAt: bigint,
    proofDeadline: bigint
  ];
  export interface OutputObject {
    transactionId: string;
    buyer: string;
    selectedAt: bigint;
    proofDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BoletoEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): BoletoEscrow;
  waitForDeployment(): Promise<this>;

  interface: BoletoEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTO_RELEASE_DEADLINE: TypedContractMethod<[], [bigint], "view">;

  COOLDOWN_PERIOD: TypedContractMethod<[], [bigint], "view">;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  FIXED_FEE_LIMIT_USDT: TypedContractMethod<[], [bigint], "view">;

  FIXED_FEE_USDT: TypedContractMethod<[], [bigint], "view">;

  HALF_FEE_WINDOW: TypedContractMethod<[], [bigint], "view">;

  INSTANT_RELEASE_WINDOW: TypedContractMethod<[], [bigint], "view">;

  MAX_TRANSACTION_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  PROOF_UPLOAD_DEADLINE: TypedContractMethod<[], [bigint], "view">;

  QUARTER_FEE_WINDOW: TypedContractMethod<[], [bigint], "view">;

  TRANSACTION_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  VARIABLE_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  autoRelease: TypedContractMethod<
    [_transactionId: BytesLike],
    [void],
    "nonpayable"
  >;

  boletoToTransaction: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  calculateBuyerFee: TypedContractMethod<
    [_usdtAmount: BigNumberish],
    [bigint],
    "view"
  >;

  canAutoRelease: TypedContractMethod<
    [_transactionId: BytesLike],
    [boolean],
    "view"
  >;

  canUploadProof: TypedContractMethod<
    [_transactionId: BytesLike],
    [boolean],
    "view"
  >;

  cancelTransaction: TypedContractMethod<
    [_transactionId: BytesLike],
    [void],
    "nonpayable"
  >;

  createDispute: TypedContractMethod<
    [_transactionId: BytesLike, _reason: string],
    [void],
    "nonpayable"
  >;

  createTransaction: TypedContractMethod<
    [
      _boletoId: BigNumberish,
      _usdtAmount: BigNumberish,
      _boletoVencimentoTimestamp: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [_tokenAddress: AddressLike, _amount: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  emergencyWithdrawDelay: TypedContractMethod<[], [bigint], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  forceExpireTransactions: TypedContractMethod<
    [_transactionIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalTransactions: bigint;
        _totalVolumeUSDT: bigint;
        _totalFeesCollected: bigint;
        _contractBalance: bigint;
      }
    ],
    "view"
  >;

  getTransaction: TypedContractMethod<
    [_transactionId: BytesLike],
    [BoletoEscrow.TransactionStructOutput],
    "view"
  >;

  getTransactionByBoleto: TypedContractMethod<
    [_boletoId: BigNumberish],
    [string],
    "view"
  >;

  lastActionTimestamp: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  manualRelease: TypedContractMethod<
    [_transactionId: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [_transactionId: BytesLike, _releaseToComprador: boolean, _reason: string],
    [void],
    "nonpayable"
  >;

  selectTransaction: TypedContractMethod<
    [_transactionId: BytesLike],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [_newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  totalFeesCollected: TypedContractMethod<[], [bigint], "view">;

  totalTransactions: TypedContractMethod<[], [bigint], "view">;

  totalVolumeUSDT: TypedContractMethod<[], [bigint], "view">;

  transactions: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: string;
        seller: string;
        buyer: string;
        usdtAmount: bigint;
        transactionFee: bigint;
        buyerFee: bigint;
        boletoId: bigint;
        createdAt: bigint;
        selectedAt: bigint;
        proofUploadedAt: bigint;
        completedAt: bigint;
        boleto__VencimentoTimestamp: bigint;
        status: bigint;
        fundsReleased: boolean;
        isEmergencyWithdraw: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  uploadProof: TypedContractMethod<
    [_transactionId: BytesLike],
    [void],
    "nonpayable"
  >;

  usdt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTO_RELEASE_DEADLINE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COOLDOWN_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIXED_FEE_LIMIT_USDT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIXED_FEE_USDT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HALF_FEE_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INSTANT_RELEASE_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TRANSACTION_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROOF_UPLOAD_DEADLINE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUARTER_FEE_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSACTION_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VARIABLE_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "autoRelease"
  ): TypedContractMethod<[_transactionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "boletoToTransaction"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "calculateBuyerFee"
  ): TypedContractMethod<[_usdtAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "canAutoRelease"
  ): TypedContractMethod<[_transactionId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canUploadProof"
  ): TypedContractMethod<[_transactionId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelTransaction"
  ): TypedContractMethod<[_transactionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createDispute"
  ): TypedContractMethod<
    [_transactionId: BytesLike, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTransaction"
  ): TypedContractMethod<
    [
      _boletoId: BigNumberish,
      _usdtAmount: BigNumberish,
      _boletoVencimentoTimestamp: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _amount: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdrawDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "forceExpireTransactions"
  ): TypedContractMethod<[_transactionIds: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalTransactions: bigint;
        _totalVolumeUSDT: bigint;
        _totalFeesCollected: bigint;
        _contractBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [_transactionId: BytesLike],
    [BoletoEscrow.TransactionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransactionByBoleto"
  ): TypedContractMethod<[_boletoId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "lastActionTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "manualRelease"
  ): TypedContractMethod<[_transactionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [_transactionId: BytesLike, _releaseToComprador: boolean, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectTransaction"
  ): TypedContractMethod<[_transactionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[_newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalFeesCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTransactions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVolumeUSDT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: string;
        seller: string;
        buyer: string;
        usdtAmount: bigint;
        transactionFee: bigint;
        buyerFee: bigint;
        boletoId: bigint;
        createdAt: bigint;
        selectedAt: bigint;
        proofUploadedAt: bigint;
        completedAt: bigint;
        boleto__VencimentoTimestamp: bigint;
        status: bigint;
        fundsReleased: boolean;
        isEmergencyWithdraw: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uploadProof"
  ): TypedContractMethod<[_transactionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdt"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DisputeCreated"
  ): TypedContractEvent<
    DisputeCreatedEvent.InputTuple,
    DisputeCreatedEvent.OutputTuple,
    DisputeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientUpdated"
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProofUploaded"
  ): TypedContractEvent<
    ProofUploadedEvent.InputTuple,
    ProofUploadedEvent.OutputTuple,
    ProofUploadedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionCancelled"
  ): TypedContractEvent<
    TransactionCancelledEvent.InputTuple,
    TransactionCancelledEvent.OutputTuple,
    TransactionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TransactionCompleted"
  ): TypedContractEvent<
    TransactionCompletedEvent.InputTuple,
    TransactionCompletedEvent.OutputTuple,
    TransactionCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionCreated"
  ): TypedContractEvent<
    TransactionCreatedEvent.InputTuple,
    TransactionCreatedEvent.OutputTuple,
    TransactionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionSelected"
  ): TypedContractEvent<
    TransactionSelectedEvent.InputTuple,
    TransactionSelectedEvent.OutputTuple,
    TransactionSelectedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DisputeCreated(bytes32,address,string,uint256)": TypedContractEvent<
      DisputeCreatedEvent.InputTuple,
      DisputeCreatedEvent.OutputTuple,
      DisputeCreatedEvent.OutputObject
    >;
    DisputeCreated: TypedContractEvent<
      DisputeCreatedEvent.InputTuple,
      DisputeCreatedEvent.OutputTuple,
      DisputeCreatedEvent.OutputObject
    >;

    "EmergencyWithdraw(address,address,uint256,string)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "FeeRecipientUpdated(address,address,address)": TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProofUploaded(bytes32,address,uint256,uint256)": TypedContractEvent<
      ProofUploadedEvent.InputTuple,
      ProofUploadedEvent.OutputTuple,
      ProofUploadedEvent.OutputObject
    >;
    ProofUploaded: TypedContractEvent<
      ProofUploadedEvent.InputTuple,
      ProofUploadedEvent.OutputTuple,
      ProofUploadedEvent.OutputObject
    >;

    "TransactionCancelled(bytes32,address,uint256,string)": TypedContractEvent<
      TransactionCancelledEvent.InputTuple,
      TransactionCancelledEvent.OutputTuple,
      TransactionCancelledEvent.OutputObject
    >;
    TransactionCancelled: TypedContractEvent<
      TransactionCancelledEvent.InputTuple,
      TransactionCancelledEvent.OutputTuple,
      TransactionCancelledEvent.OutputObject
    >;

    "TransactionCompleted(bytes32,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TransactionCompletedEvent.InputTuple,
      TransactionCompletedEvent.OutputTuple,
      TransactionCompletedEvent.OutputObject
    >;
    TransactionCompleted: TypedContractEvent<
      TransactionCompletedEvent.InputTuple,
      TransactionCompletedEvent.OutputTuple,
      TransactionCompletedEvent.OutputObject
    >;

    "TransactionCreated(bytes32,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;
    TransactionCreated: TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;

    "TransactionSelected(bytes32,address,uint256,uint256)": TypedContractEvent<
      TransactionSelectedEvent.InputTuple,
      TransactionSelectedEvent.OutputTuple,
      TransactionSelectedEvent.OutputObject
    >;
    TransactionSelected: TypedContractEvent<
      TransactionSelectedEvent.InputTuple,
      TransactionSelectedEvent.OutputTuple,
      TransactionSelectedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
