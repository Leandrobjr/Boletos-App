import { useState } from 'react';
import { FaPlus, FaTrash, FaWallet, FaFileInvoiceDollar, FaList, FaCheck, FaTimes, FaHistory, FaBitcoin, FaExclamationTriangle, FaInfoCircle } from 'react-icons/fa';
import HistoricoTransacoes from '../components/HistoricoTransacoes';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '../components/ui/card';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '../components/ui/tabs';
import { Alert, AlertTitle, AlertDescription } from '../components/ui/alert';
import { Button } from '../components/ui/button';

function VendedorPage() {
  const [activeTab, setActiveTab] = useState('cadastrar');
  const [formData, setFormData] = useState({
    beneficiario: '',
    cpfCnpj: '',
    codigoBarras: '',
    valor: '',
    dataVencimento: '',
    instituicao: ''
  });
  const [boletos, setBoletos] = useState([
    {
      id: 1,
      numeroBoleto: '12345678',
      codigoBarras: '03399.63290 64000.000006 00125.201020 4 89150000017832',
      beneficiario: 'Empresa ABC Ltda',
      cpfCnpj: '12.345.678/0001-99',
      dataVencimento: '2025-07-15',
      valor: 178.32,
      instituicao: 'Banco do Brasil',
      status: 'Pendente'
    },
    {
      id: 2,
      numeroBoleto: '87654321',
      codigoBarras: '23791.22928 60005.762908 52000.063305 9 89840000010000',
      beneficiario: 'Fornecedor XYZ S/A',
      cpfCnpj: '98.765.432/0001-10',
      dataVencimento: '2025-06-30',
      valor: 100.00,
      instituicao: 'Bradesco',
      status: 'Pago'
    }
  ]);
  const [alertInfo, setAlertInfo] = useState(null);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Validação dos dados
    let errors = {};
    let hasErrors = false;
    
    // Validar CPF/CNPJ
    if (formData.cpfCnpj.length < 11) {
      errors.cpfCnpj = 'CPF/CNPJ inválido';
      hasErrors = true;
    }
    
    // Validar código de barras
    if (formData.codigoBarras.length < 30) {
      errors.codigoBarras = 'Código de barras inválido ou incompleto';
      hasErrors = true;
    }
    
    // Validar valor
    if (!formData.valor || parseFloat(formData.valor) <= 0) {
      errors.valor = 'Valor deve ser maior que zero';
      hasErrors = true;
    }
    
    // Validar data de vencimento
    if (!formData.dataVencimento) {
      errors.dataVencimento = 'Data de vencimento é obrigatória';
      hasErrors = true;
    } else {
      const hoje = new Date();
      const vencimento = new Date(formData.dataVencimento);
      if (vencimento < hoje) {
        errors.dataVencimento = 'A data de vencimento não pode ser no passado';
        hasErrors = true;
      }
    }
    
    // Se houver erros, mostrar mensagens e não prosseguir
    if (hasErrors) {
      setAlertInfo({
        type: 'destructive',
        title: 'Erro ao cadastrar boleto',
        message: Object.entries(errors).map(([campo, erro]) => erro).join('\n')
      });
      return;
    }
    
    // Adicionar novo boleto à lista
    const novoBoleto = {
      id: boletos.length + 1,
      numeroBoleto: Math.floor(10000000 + Math.random() * 90000000).toString(),
      codigoBarras: formData.codigoBarras,
      beneficiario: 'Não informado', // Campo removido do formulário
      cpfCnpj: formData.cpfCnpj,
      dataVencimento: formData.dataVencimento,
      valor: parseFloat(formData.valor),
      instituicao: formData.instituicao,
      status: 'Pendente'
    };
    
    setBoletos([...boletos, novoBoleto]);
    
    // Chamar o Wallet Connector
    conectarCarteira(novoBoleto);
  };
  
  // Função para conectar carteira
  const conectarCarteira = (boleto) => {
    // Aqui seria chamada a ferramenta Wallet Connector já desenvolvida
    setAlertInfo({
      type: 'success',
      title: 'Carteira conectada',
      message: `Conectando carteira para pagamento do boleto ${boleto.numeroBoleto}...`
    });
    
    // Após conexão bem-sucedida, limpar formulário e ir para listagem
    setFormData({
      beneficiario: '',
      cpfCnpj: '',
      codigoBarras: '',
      valor: '',
      dataVencimento: '',
      instituicao: ''
    });
    
    // Mudar para a aba de listagem
    setActiveTab('listar');
  };
  
  const handleDelete = (id) => {
    setBoletos(boletos.filter(boleto => boleto.id !== id));
    setAlertInfo({
      type: 'success',
      title: 'Boleto excluído',
      message: 'O boleto foi excluído com sucesso.'
    });
  };
  
  const handlePay = (boleto) => {
    // Atualizar o status do boleto para 'Pago'
    const boletosAtualizados = boletos.map(item => 
      item.id === boleto.id ? {...item, status: 'Pago'} : item
    );
    setBoletos(boletosAtualizados);
    
    setAlertInfo({
      type: 'success',
      title: 'Pagamento realizado',
      message: `O boleto ${boleto.numeroBoleto} foi pago com sucesso.`
    });
  };

  return (
    <div className="bg-lime-200 min-h-screen px-4 py-8">
      <div className="container mx-auto">
      <h1 className="text-3xl font-bold mb-8 bg-green-800 text-white p-4 rounded-lg text-center">Portal do Vendedor</h1>
      
      {alertInfo && (
        <Alert 
          variant={alertInfo.type} 
          className="mb-6"
          onClick={() => setAlertInfo(null)}
        >
          <div className="flex items-start">
            {alertInfo.type === 'destructive' && <FaExclamationTriangle className="mr-2 h-4 w-4" />}
            {alertInfo.type === 'success' && <FaCheck className="mr-2 h-4 w-4" />}
            {alertInfo.type === 'default' && <FaInfoCircle className="mr-2 h-4 w-4" />}
            <div>
              <AlertTitle>{alertInfo.title}</AlertTitle>
              <AlertDescription className="whitespace-pre-line">{alertInfo.message}</AlertDescription>
            </div>
          </div>
        </Alert>
      )}
      
      {/* Navegação por abas usando Shadcn UI Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full mb-6">
        <TabsList className="grid w-full grid-cols-3 bg-lime-200 p-1 rounded-xl">
          <TabsTrigger value="cadastrar" className="flex items-center justify-center data-[state=active]:bg-lime-500 data-[state=active]:text-white">
            <FaFileInvoiceDollar className="mr-2" /> Cadastrar
          </TabsTrigger>
          <TabsTrigger value="listar" className="flex items-center justify-center data-[state=active]:bg-lime-500 data-[state=active]:text-white">
            <FaList className="mr-2" /> Listar
          </TabsTrigger>
          <TabsTrigger value="historico" className="flex items-center justify-center data-[state=active]:bg-lime-500 data-[state=active]:text-white">
            <FaHistory className="mr-2" /> Histórico
          </TabsTrigger>
        </TabsList>
        <TabsContent value="cadastrar">
          <Card>
            <CardHeader className="bg-green-800 text-white">
              <CardTitle className="text-xl">Cadastrar Boleto</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={(e) => {
                e.preventDefault();
                // Aqui implementaremos a lógica de envio do formulário
                console.log('Formulário enviado:', formData);
                setAlertInfo({
                  type: 'success',
                  title: 'Boleto cadastrado com sucesso!',
                  message: 'Seu boleto foi cadastrado e está aguardando pagamento.'
                });
              }}>
                  {/* Código de Barras */}
                  <div className="mb-4">
                    <Label htmlFor="codigoBarras" className="block text-sm font-medium text-gray-700 mb-2">
                      Código de Barras
                    </Label>
                    <Input
                      id="codigoBarras"
                      name="codigoBarras"
                      type="text"
                      value={formData.codigoBarras}
                      onChange={handleChange}
                      maxLength="48"
                      required
                      className="w-full max-w-[480px]"
                    />
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                    {/* Valor em Reais */}
                    <div>
                      <Label htmlFor="valor" className="block text-sm font-medium text-gray-700 mb-2">
                        Valor (R$)
                      </Label>
                      <Input
                        id="valor"
                        name="valor"
                        type="number"
                        step="0.01"
                        min="0"
                        value={formData.valor}
                        onChange={handleChange}
                        className="w-48"
                        required
                      />
                    </div>
                    
                    {/* Valor (USDT) */}
                    <div>
                      <Label htmlFor="valorUsdt" className="block text-sm font-medium text-green-800 mb-2 font-semibold">
                        Valor (USDT)
                      </Label>
                      <Input
                        id="valorUsdt"
                        type="number"
                        step="0.01"
                        min="0"
                        value={formData.valor ? (parseFloat(formData.valor) / 5.0).toFixed(2) : ''}
                        className="bg-green-100 border-green-500 w-48"
                        readOnly
                      />
                    </div>
                  </div>
                  
                  {/* Data de Vencimento */}
                  <div className="mb-4">
                    <Label htmlFor="dataVencimento" className="block text-sm font-medium text-gray-700 mb-2">
                      Data de Vencimento
                    </Label>
                    <Input
                      id="dataVencimento"
                      name="dataVencimento"
                      type="date"
                      value={formData.dataVencimento}
                      onChange={handleChange}
                      className="w-48"
                      required
                    />
                  </div>
                  
                  {/* Instituição Emissora */}
                  <div className="mb-4">
                    <Label htmlFor="instituicao" className="text-gray-700 mb-1">
                      Instituição Emissora
                    </Label>
                    <Input
                      id="instituicao"
                      name="instituicao"
                      type="text"
                      value={formData.instituicao}
                      onChange={handleChange}
                      className="w-64"
                      required
                    />
                  </div>
                </div>
                
                <div className="flex justify-center mt-8">
                  <Button
                    type="submit"
                    className="flex items-center px-8 py-4 bg-lime-500 text-white text-lg shadow-lg hover:bg-lime-600 hover:shadow-xl"
                  >
                    <FaWallet className="mr-2" /> Cadastrar e Conectar Carteira
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="listar">
          <Card>
            <CardHeader className="bg-green-800 text-white">
              <CardTitle className="text-center text-2xl font-bold">Pagar Boleto com USDT</CardTitle>
              <CardDescription className="text-center text-white">Gerencie seus boletos e receba em criptomoedas</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="table-container">
                <table className="table w-full border-collapse">
                  <thead className="table-header bg-green-800 text-white">
                    <tr>
                      <th className="p-3 text-left">Nº Boleto</th>
                      <th className="p-3 text-left">Código de Barras</th>
                      <th className="p-3 text-left">Beneficiário</th>
                      <th className="p-3 text-left">Data de Vencimento</th>
                      <th className="p-3 text-left">Valor (R$)</th>
                      <th className="p-3 text-left">Instituição</th>
                      <th className="p-3 text-left">Status</th>
                      <th className="p-3 text-left">Ações</th>
                    </tr>
                  </thead>
                  <tbody>
                    {boletos.map((boleto) => (
                      <tr key={boleto.id} className="border-b border-gray-200">
                        <td className="p-3 font-medium">{boleto.numeroBoleto}</td>
                        <td className="p-3">
                          <span className="text-xs">{boleto.codigoBarras}</span>
                        </td>
                        <td className="p-3">
                          <div>{boleto.beneficiario}</div>
                          <div className="text-xs text-gray-400">{boleto.cpfCnpj}</div>
                        </td>
                        <td className="p-3">
                          {new Date(boleto.dataVencimento).toLocaleDateString('pt-BR')}
                        </td>
                        <td className="p-3">
                          {boleto.valor.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
                        </td>
                        <td className="p-3">{boleto.instituicao}</td>
                        <td className="p-3">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            boleto.status === 'Pago' 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {boleto.status === 'Pago' ? <FaCheck className="mr-1" /> : null}
                            {boleto.status}
                          </span>
                        </td>
                        <td className="p-3">
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handlePay(boleto)}
                              className="p-2 bg-lime-500 text-white rounded-lg hover:bg-lime-600 transition-all duration-200 shadow-sm hover:shadow-md"
                              title="Pagar Boleto"
                            >
                              <FaCheck size={16} />
                            </button>
                            <button
                              onClick={() => handleDelete(boleto.id)}
                              className="p-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all duration-200 shadow-sm hover:shadow-md"
                              title="Excluir Boleto"
                            >
                              <FaTrash size={16} />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                    
                    {boletos.length === 0 && (
                      <tr>
                        <td colSpan="8" className="p-6 text-center text-gray-500">
                          Nenhum boleto cadastrado
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="historico">
          <Card>
            <CardHeader className="bg-green-800 text-white">
              <CardTitle>Histórico de Transações</CardTitle>
              <CardDescription className="text-white">Acompanhe todas as suas transações realizadas</CardDescription>
            </CardHeader>
            <CardContent>
              <HistoricoTransacoes tipoUsuario="vendedor" />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

export default VendedorPage;
