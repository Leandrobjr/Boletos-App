/**
 * TESTE UNIVERSAL - ARQUITETURA DEFINITIVA
 * Componente que usa a arquitetura Universal Transaction Manager
 */

import React, { useState, useEffect } from 'react';
import { useBoletoEscrowUniversal } from '../hooks/useBoletoEscrowUniversal';

const UniversalEscrowTest = ({ formData = {} }) => {
  const { 
    createEscrow, 
    initializeSystem, 
    checkSystemHealth, 
    resetSystem,
    isCreatingEscrow, 
    error, 
    step, 
    systemInfo 
  } = useBoletoEscrowUniversal();
  
  const [testResult, setTestResult] = useState(null);
  const [healthStatus, setHealthStatus] = useState(null);

  // Auto-inicializar sistema
  useEffect(() => {
    const autoInit = async () => {
      try {
        console.log('üöÄ [UNIVERSAL-UI] Auto-inicializando...');
        await initializeSystem();
      } catch (error) {
        console.warn('‚ö†Ô∏è [UNIVERSAL-UI] Auto-init falhou:', error.message);
      }
    };
    
    autoInit();
  }, [initializeSystem]);

  const handleTest = async () => {
    try {
      setTestResult('üîÑ Iniciando teste com arquitetura universal...');
      
      // Usar dados do formul√°rio atual (sem fallback que causa problema)
      console.log('üìù [UNIVERSAL-UI] Dados do formul√°rio completos:', formData);
      
      if (!formData?.valorUSDT && !formData?.valorUsdt) {
        throw new Error('Erro: valorUSDT n√£o encontrado no formul√°rio. Preencha o formul√°rio acima primeiro.');
      }
      
      const valorUSDT = formData.valorUSDT || formData.valorUsdt;
      const codigoBarras = formData.codigoBarras || 'UNIVERSAL-' + Date.now();
      
      console.log('üí∞ [UNIVERSAL-UI] Valor USDT do formul√°rio:', valorUSDT);
      console.log('üìù [UNIVERSAL-UI] C√≥digo de barras:', codigoBarras);
      
      const testData = {
        valorUSDT: Number(valorUSDT),
        codigoBarras: codigoBarras,
        descricao: `Boleto R$ ${valorUSDT} USDT`
      };

      console.log('üöÄ [UNIVERSAL-UI] Iniciando teste universal...');
      const result = await createEscrow(testData);
      
      setTestResult(`‚úÖ SUCESSO COM ARQUITETURA UNIVERSAL!

üìä RESULTADOS DEFINITIVOS:
‚Ä¢ Wallet: ${result.wallet} (${result.adapter})
‚Ä¢ Boleto ID: ${result.boletoId}
‚Ä¢ Valor: ${result.amount} USDT
‚Ä¢ Taxa (2%): ${result.fee} USDT
‚Ä¢ Total: ${result.total} USDT
‚Ä¢ Escrow ID: ${result.escrowId}
‚Ä¢ Transfer Hash: ${result.transferHash}
‚Ä¢ Escrow Hash: ${result.escrowHash}

üéâ ARQUITETURA UNIVERSAL FUNCIONOU PERFEITAMENTE!
Esta √© a solu√ß√£o definitiva, profissional e escal√°vel.`);
      
      console.log('‚úÖ [UNIVERSAL-UI] Teste conclu√≠do com sucesso:', result);
    } catch (err) {
      setTestResult(`‚ùå Erro: ${err.message}

üîç Diagn√≥stico:
‚Ä¢ Wallet atual: ${systemInfo?.wallet?.name || 'N√£o inicializado'}
‚Ä¢ Adapter: ${systemInfo?.adapter || 'N/A'}
‚Ä¢ Sistema: ${systemInfo ? 'Inicializado' : 'N√£o inicializado'}

üí° Sugest√µes:
1. Verificar se a carteira est√° conectada
2. Verificar rede (Polygon Amoy)
3. Tentar resetar o sistema
4. Verificar saldo de USDT`);
      console.error('‚ùå [UNIVERSAL-UI] Teste falhou:', err);
    }
  };

  const handleHealthCheck = async () => {
    try {
      const health = await checkSystemHealth();
      setHealthStatus(health);
    } catch (error) {
      setHealthStatus({ status: 'ERROR', message: error.message });
    }
  };

  const handleReset = async () => {
    try {
      await resetSystem();
      setTestResult('üîÑ Sistema resetado com sucesso');
      setHealthStatus(null);
    } catch (error) {
      setTestResult(`‚ùå Erro no reset: ${error.message}`);
    }
  };

  return (
    <div style={{ 
      padding: '20px', 
      border: '3px solid #4CAF50', 
      borderRadius: '12px', 
      margin: '20px',
      backgroundColor: '#e8f5e8',
      boxShadow: '0 4px 8px rgba(0,0,0,0.1)'
    }}>
      <h2 style={{ color: '#2e7d32', marginBottom: '15px' }}>
        üöÄ ARQUITETURA UNIVERSAL - SOLU√á√ÉO DEFINITIVA
      </h2>
      <p style={{ marginBottom: '20px', color: '#1b5e20' }}>
        Esta √© a implementa√ß√£o definitiva usando Universal Transaction Manager com suporte autom√°tico para Rabby e MetaMask.
      </p>
      
      {/* Informa√ß√µes do Sistema */}
      {systemInfo && (
        <div style={{ 
          marginBottom: '15px', 
          padding: '10px', 
          backgroundColor: '#c8e6c9',
          borderRadius: '6px',
          border: '1px solid #4CAF50'
        }}>
          <strong>üéØ Sistema Atual:</strong>
          <ul style={{ margin: '5px 0', paddingLeft: '20px' }}>
            <li><strong>Wallet:</strong> {systemInfo.wallet?.name} (Prioridade: {systemInfo.wallet?.priority})</li>
            <li><strong>Tipo:</strong> {systemInfo.wallet?.type}</li>
            <li><strong>Endere√ßo:</strong> {systemInfo.connection?.address}</li>
          </ul>
        </div>
      )}

      {/* Informa√ß√µes do Formul√°rio */}
      <div style={{ 
        marginBottom: '15px', 
        padding: '10px', 
        backgroundColor: '#e3f2fd',
        borderRadius: '6px',
        border: '1px solid #2196F3'
      }}>
        <strong>üìù Dados do Formul√°rio:</strong>
        <ul style={{ margin: '5px 0', paddingLeft: '20px', fontSize: '14px' }}>
          <li><strong>Valor USDT:</strong> {formData?.valorUSDT || formData?.valorUsdt || '‚ùå N√ÉO ENCONTRADO'}</li>
          <li><strong>C√≥digo Barras:</strong> {formData?.codigoBarras || '‚ùå N√ÉO ENCONTRADO'}</li>
          <li><strong>Valor R$:</strong> {formData?.valor || 'N/A'}</li>
          <li><strong>CPF/CNPJ:</strong> {formData?.cpfCnpj || 'N/A'}</li>
        </ul>
        {(!formData?.valorUSDT && !formData?.valorUsdt) && (
          <p style={{ color: '#d32f2f', fontSize: '12px', marginTop: '5px' }}>
            ‚ö†Ô∏è <strong>ATEN√á√ÉO:</strong> Preencha o formul√°rio acima primeiro para obter o valor correto!
          </p>
        )}
      </div>

      {/* Debug: Dados do Formul√°rio */}
      {formData && Object.keys(formData).length > 0 && (
        <div style={{ 
          marginBottom: '15px', 
          padding: '10px', 
          backgroundColor: '#fff3e0',
          borderRadius: '6px',
          border: '1px solid #FF9800',
          fontSize: '12px'
        }}>
          <strong>üìù Dados do Formul√°rio (Debug):</strong>
          <ul style={{ margin: '5px 0', paddingLeft: '20px' }}>
            <li><strong>Valor R$:</strong> {formData.valor || 'N/A'}</li>
            <li><strong>Valor USDT:</strong> {formData.valorUSDT || formData.valorUsdt || 'N/A'}</li>
            <li><strong>C√≥digo Barras:</strong> {formData.codigoBarras || 'N/A'}</li>
            <li><strong>Valor a ser usado:</strong> {formData?.valorUSDT || formData?.valorUsdt || 'Fallback: 122.07'}</li>
          </ul>
        </div>
      )}

      {/* Controles */}
      <div style={{ marginBottom: '15px', display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
        <button 
          onClick={handleTest}
          disabled={isCreatingEscrow}
          style={{
            padding: '12px 24px',
            backgroundColor: isCreatingEscrow ? '#ccc' : '#4CAF50',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: isCreatingEscrow ? 'not-allowed' : 'pointer',
            fontSize: '16px',
            fontWeight: 'bold'
          }}
        >
          {isCreatingEscrow ? `üîÑ ${step}...` : 'üöÄ TESTAR ARQUITETURA UNIVERSAL'}
        </button>

        <button 
          onClick={handleHealthCheck}
          style={{
            padding: '12px 24px',
            backgroundColor: '#2196F3',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
        >
          ü©∫ Health Check
        </button>

        <button 
          onClick={handleReset}
          style={{
            padding: '12px 24px',
            backgroundColor: '#FF9800',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
        >
          üîÑ Reset Sistema
        </button>
      </div>

      {/* Health Status */}
      {healthStatus && (
        <div style={{ 
          marginBottom: '15px', 
          padding: '10px', 
          backgroundColor: healthStatus.status === 'HEALTHY' ? '#c8e6c9' : '#ffcdd2',
          border: `1px solid ${healthStatus.status === 'HEALTHY' ? '#4CAF50' : '#f44336'}`,
          borderRadius: '6px'
        }}>
          <strong>ü©∫ Health Check:</strong>
          <pre style={{ margin: '5px 0', fontSize: '12px' }}>
            {JSON.stringify(healthStatus, null, 2)}
          </pre>
        </div>
      )}

      {/* Erro */}
      {error && (
        <div style={{ 
          marginBottom: '15px', 
          padding: '10px', 
          backgroundColor: '#ffebee', 
          border: '1px solid #f44336',
          borderRadius: '6px',
          color: '#d32f2f'
        }}>
          <strong>‚ùå Erro:</strong> {error}
        </div>
      )}

      {/* Resultado */}
      {testResult && (
        <div style={{ 
          marginTop: '15px', 
          padding: '15px', 
          backgroundColor: testResult.includes('‚úÖ') ? '#e8f5e8' : '#ffebee',
          border: `2px solid ${testResult.includes('‚úÖ') ? '#4CAF50' : '#f44336'}`,
          borderRadius: '8px',
          color: testResult.includes('‚úÖ') ? '#2e7d32' : '#d32f2f',
          whiteSpace: 'pre-line',
          fontFamily: 'monospace',
          fontSize: '14px'
        }}>
          <strong>üìã RESULTADO:</strong>
          {testResult}
        </div>
      )}

      {/* Documenta√ß√£o da Arquitetura */}
      <div style={{ marginTop: '20px', fontSize: '14px', color: '#1b5e20' }}>
        <h4>üèóÔ∏è ARQUITETURA IMPLEMENTADA:</h4>
        <ul style={{ paddingLeft: '20px' }}>
          <li>‚úÖ <strong>WalletRouter:</strong> Detec√ß√£o autom√°tica do melhor wallet</li>
          <li>‚úÖ <strong>WalletAdapters:</strong> Implementa√ß√µes espec√≠ficas (Rabby, MetaMask, Generic)</li>
          <li>‚úÖ <strong>UniversalTransactionManager:</strong> Coordena√ß√£o central com fallbacks</li>
          <li>‚úÖ <strong>Retry Logic:</strong> Tentativas autom√°ticas com backoff exponencial</li>
          <li>‚úÖ <strong>Wallet Switching:</strong> Mudan√ßa autom√°tica quando um wallet falha</li>
          <li>‚úÖ <strong>Health Monitoring:</strong> Diagn√≥stico cont√≠nuo do sistema</li>
        </ul>
        
        <h4 style={{ marginTop: '15px' }}>üéØ VANTAGENS:</h4>
        <ul style={{ paddingLeft: '20px' }}>
          <li>üîÑ <strong>Fallback Autom√°tico:</strong> Se MetaMask falha, muda para Rabby</li>
          <li>üéØ <strong>Estrat√©gias M√∫ltiplas:</strong> Cada wallet tem implementa√ß√µes espec√≠ficas</li>
          <li>üìä <strong>Monitoramento:</strong> Health checks e diagn√≥sticos detalhados</li>
          <li>üîß <strong>Escal√°vel:</strong> F√°cil adicionar novos wallets e estrat√©gias</li>
          <li>üíº <strong>Corporativo:</strong> Padr√µes de design enterprise</li>
        </ul>
      </div>
    </div>
  );
};

export default UniversalEscrowTest;
