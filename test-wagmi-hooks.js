// Teste para verificar se os hooks do Wagmi est√£o funcionando
const fs = require('fs');

console.log('üß™ TESTANDO HOOKS DO WAGMI');
console.log('============================');

try {
  // Verificar se o arquivo de configura√ß√£o existe
  const configPath = './frontend/src/config/rainbowConfig.js';
  if (!fs.existsSync(configPath)) {
    console.log('‚ùå Arquivo rainbowConfig.js n√£o encontrado!');
    process.exit(1);
  }

  console.log('‚úÖ Arquivo rainbowConfig.js encontrado!');
  
  // Verificar se o arquivo de configura√ß√£o dos contratos existe
  const contractConfigPath = './frontend/src/contracts/config.js';
  if (!fs.existsSync(contractConfigPath)) {
    console.log('‚ùå Arquivo config.js dos contratos n√£o encontrado!');
    process.exit(1);
  }

  console.log('‚úÖ Arquivo config.js dos contratos encontrado!');
  
  // Verificar se os ABIs existem
  const p2pAbiPath = './frontend/src/contracts/abis/P2PEscrow.json';
  const mockUsdtAbiPath = './frontend/src/contracts/abis/MockUSDT.json';
  
  if (!fs.existsSync(p2pAbiPath)) {
    console.log('‚ùå ABI P2PEscrow n√£o encontrado!');
  } else {
    console.log('‚úÖ ABI P2PEscrow encontrado!');
  }
  
  if (!fs.existsSync(mockUsdtAbiPath)) {
    console.log('‚ùå ABI MockUSDT n√£o encontrado!');
  } else {
    console.log('‚úÖ ABI MockUSDT encontrado!');
  }
  
  // Verificar se o hook est√° sendo exportado corretamente
  const hookPath = './frontend/src/hooks/useBoletoEscrow.js';
  if (!fs.existsSync(hookPath)) {
    console.log('‚ùå Hook useBoletoEscrow n√£o encontrado!');
    process.exit(1);
  }

  console.log('‚úÖ Hook useBoletoEscrow encontrado!');
  
  // Verificar se o hook est√° sendo importado corretamente na p√°gina
  const vendedorPagePath = './frontend/src/pages/VendedorPage.jsx';
  if (!fs.existsSync(vendedorPagePath)) {
    console.log('‚ùå P√°gina VendedorPage n√£o encontrada!');
    process.exit(1);
  }

  console.log('‚úÖ P√°gina VendedorPage encontrada!');
  
  // Verificar se o componente de debug foi adicionado
  const vendedorPageContent = fs.readFileSync(vendedorPagePath, 'utf8');
  const hasHooksDebug = vendedorPageContent.includes('HooksDebug');
  
  if (hasHooksDebug) {
    console.log('‚úÖ Componente HooksDebug adicionado √† p√°gina!');
  } else {
    console.log('‚ùå Componente HooksDebug n√£o foi adicionado √† p√°gina!');
  }
  
  // Verificar se o hook est√° sendo usado corretamente
  const usesHook = vendedorPageContent.includes('useBoletoEscrow');
  
  if (usesHook) {
    console.log('‚úÖ Hook useBoletoEscrow est√° sendo usado na p√°gina!');
  } else {
    console.log('‚ùå Hook useBoletoEscrow n√£o est√° sendo usado na p√°gina!');
  }
  
  console.log('\nüéØ AN√ÅLISE COMPLETA:');
  console.log('====================');
  console.log('1. Configura√ß√£o RainbowKit: ‚úÖ');
  console.log('2. Configura√ß√£o Contratos: ‚úÖ');
  console.log('3. ABIs dos Contratos: ‚úÖ');
  console.log('4. Hook useBoletoEscrow: ‚úÖ');
  console.log('5. P√°gina VendedorPage: ‚úÖ');
  console.log(`6. Componente Debug: ${hasHooksDebug ? '‚úÖ' : '‚ùå'}`);
  console.log(`7. Hook sendo usado: ${usesHook ? '‚úÖ' : '‚ùå'}`);
  
  if (hasHooksDebug && usesHook) {
    console.log('\nüéâ TODOS OS COMPONENTES EST√ÉO CONFIGURADOS!');
    console.log('Agora teste no navegador para ver o debug dos hooks.');
  } else {
    console.log('\n‚ö†Ô∏è  AINDA H√Å PROBLEMAS DE CONFIGURA√á√ÉO!');
  }
  
} catch (error) {
  console.error('‚ùå Erro ao analisar:', error.message);
}





