// Teste para verificar se o componente de debug est√° funcionando
const fs = require('fs');

console.log('üß™ TESTANDO COMPONENTE DE DEBUG');
console.log('================================');

try {
  // Verificar se o componente foi corrigido
  const debugPath = './frontend/src/components/HooksDebug.jsx';
  if (!fs.existsSync(debugPath)) {
    console.log('‚ùå Componente HooksDebug n√£o encontrado!');
    process.exit(1);
  }

  console.log('‚úÖ Componente HooksDebug encontrado!');
  
  // Ler o conte√∫do do componente
  const content = fs.readFileSync(debugPath, 'utf8');
  
  // Verificar se a fun√ß√£o renderValue foi adicionada
  const hasRenderValue = content.includes('renderValue');
  
  if (hasRenderValue) {
    console.log('‚úÖ Fun√ß√£o renderValue adicionada!');
  } else {
    console.log('‚ùå Fun√ß√£o renderValue n√£o foi adicionada!');
  }
  
  // Verificar se h√° verifica√ß√µes de seguran√ßa para contractConfig
  const hasSafeContractConfig = content.includes('contractConfig?.') && content.includes('|| \'N/A\'');
  
  if (hasSafeContractConfig) {
    console.log('‚úÖ Verifica√ß√µes de seguran√ßa para contractConfig implementadas!');
  } else {
    console.log('‚ùå Verifica√ß√µes de seguran√ßa para contractConfig n√£o implementadas!');
  }
  
  // Verificar se h√° verifica√ß√µes para hooksStatus
  const hasSafeHooksStatus = content.includes('hooksStatus &&');
  
  if (hasSafeHooksStatus) {
    console.log('‚úÖ Verifica√ß√µes de seguran√ßa para hooksStatus implementadas!');
  } else {
    console.log('‚ùå Verifica√ß√µes de seguran√ßa para hooksStatus n√£o implementadas!');
  }
  
  // Verificar se o erro de renderiza√ß√£o foi corrigido
  const hasNetworkRenderFix = content.includes('renderValue(contractConfig.NETWORK)');
  
  if (hasNetworkRenderFix) {
    console.log('‚úÖ Corre√ß√£o para renderiza√ß√£o de NETWORK implementada!');
  } else {
    console.log('‚ùå Corre√ß√£o para renderiza√ß√£o de NETWORK n√£o implementada!');
  }
  
  console.log('\nüéØ AN√ÅLISE COMPLETA:');
  console.log('====================');
  console.log(`1. Fun√ß√£o renderValue: ${hasRenderValue ? '‚úÖ' : '‚ùå'}`);
  console.log(`2. Verifica√ß√µes contractConfig: ${hasSafeContractConfig ? '‚úÖ' : '‚ùå'}`);
  console.log(`3. Verifica√ß√µes hooksStatus: ${hasSafeHooksStatus ? '‚úÖ' : '‚ùå'}`);
  console.log(`4. Corre√ß√£o NETWORK: ${hasNetworkRenderFix ? '‚úÖ' : '‚ùå'}`);
  
  if (hasRenderValue && hasSafeContractConfig && hasSafeHooksStatus && hasNetworkRenderFix) {
    console.log('\nüéâ COMPONENTE DE DEBUG CORRIGIDO COM SUCESSO!');
    console.log('O erro de renderiza√ß√£o deve estar resolvido.');
    console.log('Agora teste no navegador para ver o debug dos hooks funcionando!');
  } else {
    console.log('\n‚ö†Ô∏è  AINDA H√Å PROBLEMAS NO COMPONENTE DE DEBUG!');
    console.log('Verifique as corre√ß√µes acima.');
  }
  
} catch (error) {
  console.error('‚ùå Erro ao analisar:', error.message);
}





