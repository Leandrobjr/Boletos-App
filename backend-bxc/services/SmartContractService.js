/**
 * üîó SERVI√áO DE INTEGRA√á√ÉO COM SMART CONTRACT - BoletoXCrypto Produ√ß√£o
 * 
 * Gerencia intera√ß√µes com o smart contract BoletoEscrow
 * - Chama expireTransactions para boletos expirados
 * - Sincroniza status entre blockchain e banco
 * - Libera fundos automaticamente
 * 
 * @author Engenheiro S√™nior
 * @version 1.0.0 - Produ√ß√£o
 */

const { ethers } = require('ethers');

class SmartContractService {
  constructor() {
    // Configura√ß√£o da rede Polygon Amoy
    this.PROVIDER_URL = 'https://rpc-amoy.polygon.technology';
    this.CHAIN_ID = 80002;
    
    // Endere√ßos dos contratos
    this.P2P_ESCROW_ADDRESS = '0xe69C2630F4d52AF44C1A4CDE7D1552Cf1f97Cec2';
    this.MOCK_USDT_ADDRESS = '0x6A1068Dc06e723f7208932a781CbDfa95FEA76BD';
    
    // ABI simplificada do contrato BoletoEscrow
    this.ESCROW_ABI = [
      "function expireTransactions(bytes32[] calldata _transactionIds) external onlyOwner nonReentrant",
      "function getTransaction(bytes32 _transactionId) external view returns (tuple(bytes32 id, address seller, address buyer, uint256 usdtAmount, uint256 transactionFee, uint256 buyerFee, uint256 boletoId, uint256 createdAt, uint256 selectedAt, uint256 proofUploadedAt, uint256 completedAt, uint256 boleto__VencimentoTimestamp, uint8 status, bool fundsReleased, bool isEmergencyWithdraw))",
      "function boletoToTransaction(uint256 _boletoId) external view returns (bytes32)",
      "event TransactionCancelled(bytes32 indexed transactionId, address indexed seller, uint256 refundAmount, string reason)"
    ];
    
    this.provider = null;
    this.contract = null;
    this.isInitialized = false;
  }

  /**
   * üöÄ Inicializa conex√£o com blockchain
   */
  async initialize() {
    try {
      console.log('üîó [SMART_CONTRACT] Inicializando conex√£o com blockchain...');
      
      // Configurar provider
      this.provider = new ethers.JsonRpcProvider(this.PROVIDER_URL);
      
      // Verificar conex√£o
      const network = await this.provider.getNetwork();
      console.log(`üîó [SMART_CONTRACT] Conectado √† rede: ${network.name} (Chain ID: ${network.chainId})`);
      
      if (Number(network.chainId) !== this.CHAIN_ID) {
        throw new Error(`Rede incorreta. Esperado: ${this.CHAIN_ID}, Atual: ${network.chainId}`);
      }
      
      // Configurar contrato (sem signer para opera√ß√µes readonly)
      this.contract = new ethers.Contract(this.P2P_ESCROW_ADDRESS, this.ESCROW_ABI, this.provider);
      
      this.isInitialized = true;
      console.log('‚úÖ [SMART_CONTRACT] Inicializa√ß√£o conclu√≠da com sucesso');
      
      return true;
      
    } catch (error) {
      console.error('‚ùå [SMART_CONTRACT] Erro na inicializa√ß√£o:', error);
      this.isInitialized = false;
      return false;
    }
  }

  /**
   * üîç Busca transa√ß√£o no smart contract por boleto ID
   */
  async getTransactionByBoletoId(boletoId) {
    try {
      if (!this.isInitialized) {
        await this.initialize();
      }

      console.log(`üîç [SMART_CONTRACT] Buscando transa√ß√£o para boleto ID: ${boletoId}`);
      
      // Buscar transaction ID pelo boleto ID
      const transactionId = await this.contract.boletoToTransaction(boletoId);
      
      if (transactionId === ethers.ZeroHash) {
        console.log(`‚ö†Ô∏è [SMART_CONTRACT] Nenhuma transa√ß√£o encontrada para boleto ${boletoId}`);
        return null;
      }
      
      console.log(`‚úÖ [SMART_CONTRACT] Transaction ID encontrado: ${transactionId}`);
      
      // Buscar detalhes da transa√ß√£o
      const transaction = await this.contract.getTransaction(transactionId);
      
      return {
        transactionId: transactionId,
        seller: transaction.seller,
        buyer: transaction.buyer,
        usdtAmount: transaction.usdtAmount.toString(),
        transactionFee: transaction.transactionFee.toString(),
        buyerFee: transaction.buyerFee.toString(),
        boletoId: transaction.boletoId.toString(),
        createdAt: new Date(Number(transaction.createdAt) * 1000),
        selectedAt: new Date(Number(transaction.selectedAt) * 1000),
        proofUploadedAt: transaction.proofUploadedAt ? new Date(Number(transaction.proofUploadedAt) * 1000) : null,
        completedAt: transaction.completedAt ? new Date(Number(transaction.completedAt) * 1000) : null,
        status: Number(transaction.status),
        fundsReleased: transaction.fundsReleased
      };
      
    } catch (error) {
      console.error(`‚ùå [SMART_CONTRACT] Erro ao buscar transa√ß√£o para boleto ${boletoId}:`, error);
      return null;
    }
  }

  /**
   * ‚è∞ Verifica se transa√ß√£o est√° expirada no smart contract
   */
  async isTransactionExpired(boletoId) {
    try {
      const transaction = await this.getTransactionByBoletoId(boletoId);
      
      if (!transaction) {
        return { expired: false, reason: 'Transa√ß√£o n√£o encontrada no contrato' };
      }
      
      const now = new Date();
      const selectedAt = transaction.selectedAt;
      const oneHour = 60 * 60 * 1000; // 1 hora em milissegundos
      
      // Verificar se passou de 60 minutos desde a sele√ß√£o
      const timeSinceSelection = now.getTime() - selectedAt.getTime();
      const isExpired = timeSinceSelection > oneHour;
      
      return {
        expired: isExpired,
        timeSinceSelection: timeSinceSelection,
        timeSinceSelectionMinutes: Math.floor(timeSinceSelection / (1000 * 60)),
        reason: isExpired ? 'Excedeu 60 minutos desde a sele√ß√£o' : 'Ainda dentro do prazo'
      };
      
    } catch (error) {
      console.error(`‚ùå [SMART_CONTRACT] Erro ao verificar expira√ß√£o da transa√ß√£o ${boletoId}:`, error);
      return { expired: false, reason: 'Erro ao verificar expira√ß√£o' };
    }
  }

  /**
   * üîÑ Expira transa√ß√µes no smart contract
   * NOTA: Requer chave privada do owner para executar
   */
  async expireTransactions(transactionIds) {
    try {
      if (!this.isInitialized) {
        await this.initialize();
      }

      console.log(`üîÑ [SMART_CONTRACT] Tentando expirar ${transactionIds.length} transa√ß√µes...`);
      
      // Verificar se temos chave privada do owner
      if (!process.env.OWNER_PRIVATE_KEY) {
        console.log('‚ö†Ô∏è [SMART_CONTRACT] OWNER_PRIVATE_KEY n√£o configurada - expira√ß√£o manual necess√°ria');
        console.log(`üìã [SMART_CONTRACT] Transaction IDs para expira√ß√£o manual: ${transactionIds.join(', ')}`);
        return {
          success: false,
          reason: 'OWNER_PRIVATE_KEY n√£o configurada',
          transactionIds: transactionIds
        };
      }
      
      // Configurar signer com chave privada do owner
      const wallet = new ethers.Wallet(process.env.OWNER_PRIVATE_KEY, this.provider);
      const contractWithSigner = this.contract.connect(wallet);
      
      // Executar expira√ß√£o
      const tx = await contractWithSigner.expireTransactions(transactionIds);
      console.log(`üîÑ [SMART_CONTRACT] Transa√ß√£o enviada: ${tx.hash}`);
      
      // Aguardar confirma√ß√£o
      const receipt = await tx.wait();
      console.log(`‚úÖ [SMART_CONTRACT] Transa√ß√£o confirmada: ${receipt.transactionHash}`);
      
      return {
        success: true,
        transactionHash: receipt.transactionHash,
        transactionIds: transactionIds
      };
      
    } catch (error) {
      console.error('‚ùå [SMART_CONTRACT] Erro ao expirar transa√ß√µes:', error);
      return {
        success: false,
        reason: error.message,
        transactionIds: transactionIds
      };
    }
  }

  /**
   * üìä Obt√©m estat√≠sticas do smart contract
   */
  async getContractStats() {
    try {
      if (!this.isInitialized) {
        await this.initialize();
      }

      const network = await this.provider.getNetwork();
      const blockNumber = await this.provider.getBlockNumber();
      
      return {
        contractAddress: this.P2P_ESCROW_ADDRESS,
        network: {
          name: network.name,
          chainId: Number(network.chainId)
        },
        currentBlock: blockNumber,
        isInitialized: this.isInitialized,
        providerUrl: this.PROVIDER_URL
      };
      
    } catch (error) {
      console.error('‚ùå [SMART_CONTRACT] Erro ao obter estat√≠sticas:', error);
      return null;
    }
  }
}

module.exports = SmartContractService;
